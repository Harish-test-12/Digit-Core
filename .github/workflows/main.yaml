name: Build Pipeline
on:
  workflow_dispatch:
    inputs:
      folder:
        description: 'Select the folder which contains your services'
        required: true
        type: choice
        options:
          - core-services
          - business-services
      serviceName:
        description: 'Provide the service name you want to build'
        required: true
      dbMigration:
        description: 'Enable if you require DB migration for this service'
        required: true
        type: boolean
      branch:
        description: 'Select the branch you want to build'
        required: true
        type: choice
        options:
          - master
          - core-2.9-lts-mvn-check

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 2: Check if .version exists and prepare it
      - name: Check if .version exists and prepare it
        id: prepare_version
        run: |
          echo "Checking if .version file exists"
          if [ -f $GITHUB_WORKSPACE/.version ]; then
            echo "Version file found in workspace."
          else
            echo "No version file found. Creating new version file."
            echo "0" > $GITHUB_WORKSPACE/.version
          fi
          echo "Listing contents of the workspace:"
          ls -al $GITHUB_WORKSPACE
          echo "Contents of .version:"
          cat $GITHUB_WORKSPACE/.version

      # Step 3: Generate a unique tag
      - name: Generate a unique tag
        id: tag
        run: |
          BRANCH=${{ github.event.inputs.branch }}
          COMMIT_HASH=$(git rev-parse --short HEAD || echo "no-commit")

          # Read the version from the .version file
          VERSION=$(cat $GITHUB_WORKSPACE/.version)

          # Increment the version
          NEW_VERSION=$((VERSION + 1))

          # Update .version file with the new version
          echo $NEW_VERSION > $GITHUB_WORKSPACE/.version

          # Create the tag
          TAG="${BRANCH}-${COMMIT_HASH}-${NEW_VERSION}"

          # Export variables for the next steps
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          echo "VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=tag::${TAG}"
          echo "::set-output name=version::${NEW_VERSION}"

      # Step 4: Build and push application Docker image
      - name: Build and push application Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/maven/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}:${{ steps.tag.outputs.tag }}
          build-args: WORK_DIR=${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}

      # Step 5: Build and push database Docker image (conditionally)
      - name: Build and push database Docker image
        if: ${{ github.event.inputs.dbMigration == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db
          file: ${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}-db:${{ steps.tag.outputs.tag }}

      - name: Verify .version file exists
        run: |
          echo "Listing contents of the workspace before upload:"
          ls -al $GITHUB_WORKSPACE
          echo "Contents of .version file:"
          cat $GITHUB_WORKSPACE/.version


      # Step 6: Upload .version file as an artifact
      - name: Upload .version file as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: version-file
          path: $GITHUB_WORKSPACE/.version
          continue-on-error: false  # Will stop the job if this fails
