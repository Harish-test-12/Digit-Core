name: Build Pipeline
on:
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      folder:
        description: 'Select the folder which contains your services'
        required: true
        type: choice
        options:
          - core-services
          - business-services
      serviceName:
        description: 'Provide the service name you want to build'
        required: true
      # dbMigration:
      #   description: 'Enable if you require DB migration for this service'
      #   required: true
      #   type: boolean
      libraries:
        description: Enable if you want to upload to libraries
        required: true
        type: boolean
      # branch:
      #   description: 'Select the branch you want to build'
      #   required: true
      #   type: choice
      #   options:
      #     - master
      #     - core-2.9-lts-mvn-check

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if DB folder exists
        id: check_folder
        run: |
          if [ -d "${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db" ]; then
            echo "folder_exists=true" >> $GITHUB_ENV
          else
            echo "folder_exists=false" >> $GITHUB_ENV
          fi
      - name: check DB Environment Variable
        run: |
          echo ${{ env.folder_exists }}

      # Step 3: Fetch existing tags and generate the next tag

      - name: Generate the next tag
        id: tag
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          # Set variables
          BRANCH=${{ github.event.inputs.branch }}
          COMMIT_HASH=$(git rev-parse --short HEAD)

          # Log in to Docker Hub and fetch a token
          TOKEN=$(curl -s -X POST "https://hub.docker.com/v2/users/login/" \
            -H "Content-Type: application/json" \
            -d '{"username": "'$DOCKER_USERNAME'", "password": "'$DOCKER_PASSWORD'"}' | jq -r .token)

          # Check if the repository exists
          REPO_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/${{ github.event.inputs.serviceName }}/")

          if [ "$REPO_CHECK" -ne 200 ]; then
            echo "Repository does not exist. Assuming a first-time build."
            NEXT_TAG="${BRANCH}-${COMMIT_HASH}-1"
          else
            # Fetch existing tags for the service
            EXISTING_TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
              "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/${{ github.event.inputs.serviceName }}/tags?page_size=100" | jq -r '.results[].name')

            # Filter for the current branch and commit hash
            LATEST_TAG=$(echo "$EXISTING_TAGS" | grep "^${BRANCH}-${COMMIT_HASH}-" | sort -V | tail -n 1)
            if [ -z "$LATEST_TAG" ]; then
              # No tag exists for this branch and commit hash
              NEXT_TAG="${BRANCH}-${COMMIT_HASH}-1"
            else
              # Increment the numeric part of the latest tag
              TAG_NUMBER=$(echo "$LATEST_TAG" | awk -F- '{print $NF}')
              NEXT_TAG="${BRANCH}-${COMMIT_HASH}-$((TAG_NUMBER + 1))"
            fi
          fi

          # Export the next tag
          echo "::set-output name=tag::${NEXT_TAG}"
          echo "NEXT_TAG=${NEXT_TAG}" >> $GITHUB_ENV

      - name: Build and push application Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/maven/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}:${{ steps.tag.outputs.tag }}
          build-args: WORK_DIR=${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}

      # Step 5: Build and push database Docker image (conditionally)
      - if: env.folder_exists == 'true'
        name: Build and push database Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db
          file: ${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}-db:${{ steps.tag.outputs.tag }}

      - name: Libraries Build and push
        if: ${{ github.event.inputs.libraries == 'true' }} 
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ github.event.inputs.folder }}/libraries/${{ github.event.inputs.serviceName }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}:${{ steps.tag.outputs.tag }}
          build-args: |
            WORK_DIR=${{ github.event.inputs.folder }}/libraries/${{ github.event.inputs.serviceName }}
            nexusUsername=${{ secrets.NEXUS_USER }}
            nexusPassword=${{ secrets.NEXUS_PWD }}    
    
      - name: Display Image details
        run: >
          echo "${{ secrets.DOCKER_USERNAME }}/${{
          github.event.inputs.serviceName }}:${{ steps.tag.outputs.tag }}"
 
          echo "${{ secrets.DOCKER_USERNAME }}/${{
          github.event.inputs.serviceName }}-db:${{ steps.tag.outputs.tag }}"