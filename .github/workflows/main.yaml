name: Build Pipeline
on:
  workflow_dispatch:
    inputs:
      folder:
        description: 'Select the folder which contains your services'
        required: true
        type: choice
        options:
          - core-services
          - business-services
      serviceName:
        description: 'Provide the service name you want to build'
        required: true
      dbMigration:
        description: 'Enable if you require DB migration for this service'
        required: true
        type: boolean
      branch:
        description: 'Select the branch you want to build'
        required: true
        type: choice
        options:
          - master
          - core-2.9-lts-mvn-check

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Download the version file (if it exists)
      - name: Download the version file
        uses: actions/download-artifact@v3
        with:
          name: version-file
          path: .
        continue-on-error: true

      # Debugging Step - Check the version file content
      - name: Debug version file
        run: |
          ls -alh .version
          cat .version || echo "No version file found"

      # Step 4: Generate a unique tag
      - name: Generate a unique tag
        id: tag
        run: |
          BRANCH=${{ github.event.inputs.branch }}
          COMMIT_HASH=$(git rev-parse --short HEAD || echo "no-commit")

          # Read or initialize the version file
          if [ -f .version ]; then
            VERSION=$(cat .version)
          else
            VERSION=0
          fi

          # Increment the version
          NEW_VERSION=$((VERSION + 1))
          echo $NEW_VERSION > .version

          # Create the tag
          TAG="${BRANCH}-${COMMIT_HASH}-${NEW_VERSION}"

          # Export variables for the next steps
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          echo "VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=tag::${TAG}"
          echo "::set-output name=version::${NEW_VERSION}"

      # Step 5: Build and push the application Docker image
      - name: Build and push application Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/maven/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}:${{ steps.tag.outputs.tag }}
          build-args: WORK_DIR=${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}

      # Step 6: Build and push the database Docker image (conditionally)
      - name: Build and push database Docker image
        if: ${{ github.event.inputs.dbMigration == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db
          file: ${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}-db:${{ steps.tag.outputs.tag }}

      # Step 7: Upload the updated version file
      - name: Save the .version file as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: version-file
          path: .version