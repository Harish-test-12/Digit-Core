name: Build Pipeline
on:
  workflow_dispatch:
    inputs:
      folder:
        description: 'Select the folder which contains your services'
        required: true
        type: choice
        options:
          - core-services
          - business-services
      serviceName:
        description: 'Provide the service name you want to build'
        required: true
      dbMigration:
        description: 'Enable if you require DB migration for this service'
        required: true
        type: boolean
      branch:
        description: 'Select the branch you want to build'
        required: true
        type: choice
        options:
          - master
          - core-2.9-lts-mvn-check

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # Step 2: Display the branch name
      - name: Display branch
        run: |
          echo "BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
          echo "BRANCH=${{ github.event.inputs.branch }}"

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Get the latest tag from Docker Hub and calculate the next tag
      - name: Get latest Docker tag and increment
        id: tag_calculation
        run: |
          # Fetch tags from Docker Hub
          TAGS=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}/tags?page_size=100" | jq -r '.results[].name')
          echo "Existing tags: $TAGS"

          # Filter tags for the specific branch
          LATEST_TAG=$(echo "$TAGS" | grep "^${{ github.event.inputs.branch }}-" | sort -V | tail -n 1)
          echo "Latest tag: $LATEST_TAG"

          if [ -z "$LATEST_TAG" ]; then
            NEXT_TAG="${{ github.event.inputs.branch }}-1"
          else
            TAG_NUMBER=$(echo "$LATEST_TAG" | awk -F- '{print $NF}')
            NEXT_TAG="${{ github.event.inputs.branch }}-$((TAG_NUMBER + 1))"
          fi

          # Append the commit hash to the tag
          COMMIT_HASH=$(git rev-parse --short HEAD || echo "no-commit")
          FINAL_TAG="$NEXT_TAG-$COMMIT_HASH"

          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV
          echo "FINAL_TAG=$FINAL_TAG" >> $GITHUB_ENV
          echo "::set-output name=next_tag::$NEXT_TAG"
          echo "::set-output name=final_tag::$FINAL_TAG"

      # Step 5: Build and push the application Docker image
      - name: Build and push application Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/maven/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}:${{ env.FINAL_TAG }}
          build-args: WORK_DIR=${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}

      # Step 6: Build and push the database Docker image (conditionally)
      - name: Build and push database Docker image
        if: ${{ github.event.inputs.dbMigration == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db
          file: ${{ github.event.inputs.folder }}/${{ github.event.inputs.serviceName }}/src/main/resources/db/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.inputs.serviceName }}-db:${{ env.FINAL_TAG }}

      # Step 7: Display the generated tag
      - name: Display tag details
        run: |
          echo "Generated application tag: ${{ env.FINAL_TAG }}"
          if [ "${{ github.event.inputs.dbMigration }}" == "true" ]; then
            echo "Generated DB tag: ${{ env.FINAL_TAG }}"
          fi
